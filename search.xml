<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/17/hello-world/"/>
      <url>/2020/06/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native Context 用法</title>
      <link href="/2020/05/20/react-native-context-yong-fa/"/>
      <url>/2020/05/20/react-native-context-yong-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考资料：</p><p>React Native 官网文章：<a href="https://reactjs.org/docs/context.html" target="_blank" rel="noopener">Context</a><br>React Native 官网文章：<a href="https://zh-hans.reactjs.org/docs/context.html" target="_blank" rel="noopener">Context(简体中文文档)</a></p></blockquote><p><em>本文示例代码使用 TypeScript 语言。</em></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在整个视图树中传递数据，不必每个层级都通过 Props 传。</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="Context-声明"><a href="#Context-声明" class="headerlink" title="Context 声明"></a>Context 声明</h3><p>Context 声明的数据结构最好是所在视图树中通用的。</p><p>在 <code>Contexts.ts</code> 文件中声明 Context 的数据结构：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> Rect <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PageContextValue</span> <span class="token punctuation">{</span>  theme<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 页面级上下文。 */</span><span class="token keyword">export</span> <span class="token keyword">const</span> PageContext <span class="token operator">=</span> Rect<span class="token punctuation">.</span>createContext<span class="token operator">&lt;</span>PageContextValue<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="提供-Context-数据源"><a href="#提供-Context-数据源" class="headerlink" title="提供 Context 数据源"></a>提供 Context 数据源</h3><p>在页面根视图外包一层 <code>PageContext.Provider</code> 节点，通过 <code>value</code> 属性提供数据。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> PageContext<span class="token punctuation">,</span> PageContextValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Contexts'</span><span class="token keyword">const</span> CONTEXT<span class="token punctuation">:</span> PageContextValue <span class="token operator">=</span> <span class="token punctuation">{</span>  theme<span class="token punctuation">:</span> <span class="token string">'dark'</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HomePage</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token punctuation">,</span> <span class="token keyword">any</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>PageContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>CONTEXT<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Toolbar <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>PageContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意，避免使用以下方式，这样会导致每次执行 <code>render</code> 函数都会创建一个新的 <code>PageContextValue</code> 对象，造成不必要的刷新：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> PageContext<span class="token punctuation">,</span> PageContextValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Contexts'</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HomePage</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token punctuation">,</span> <span class="token keyword">any</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">// 在 render 函数中创建 PageContextValue 可能导致不必要的刷新。</span>      <span class="token operator">&lt;</span>PageContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> theme<span class="token punctuation">:</span> <span class="token string">'dark'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Toolbar <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>PageContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果 Context 是动态改变的，最好通过 State 来刷新：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> PageContext<span class="token punctuation">,</span> PageContextValue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Contexts'</span><span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>  context<span class="token punctuation">:</span> PageContextValue<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HomePage</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token punctuation">,</span> State<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> context<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      context<span class="token punctuation">:</span> <span class="token punctuation">{</span> theme<span class="token punctuation">:</span> <span class="token string">'dark'</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>PageContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>context<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Toolbar <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>PageContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="获取-Context-传递的数据"><a href="#获取-Context-传递的数据" class="headerlink" title="获取 Context 传递的数据"></a>获取 Context 传递的数据</h3><p>通过 <code>this.context</code> 方式获取数据，可以在任何生命周期中获取。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 将 Context 赋值给 contextType 变量</span>  <span class="token keyword">static</span> contextType <span class="token operator">=</span> PageContext<span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 基于这个值进行渲染工作 */</span>    <span class="token keyword">return</span> value<span class="token punctuation">.</span>theme <span class="token operator">===</span> <span class="token string">'dark'</span> <span class="token operator">?</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>View<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* dark主题的组件 */</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>    <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>View<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 非dark主题的组件 */</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过 <code>Context.Consumer</code> 方式获取数据</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 将 Context 赋值给 contextType 变量</span>  <span class="token keyword">static</span> contextType <span class="token operator">=</span> PageContext<span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">&lt;</span>PageContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>    <span class="token punctuation">{</span>value <span class="token operator">=</span><span class="token operator">></span> value<span class="token punctuation">.</span>theme <span class="token operator">===</span> <span class="token string">'dark'</span> <span class="token operator">?</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>View<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* dark主题的组件 */</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>    <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>View<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 非dark主题的组件 */</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>PageContext<span class="token punctuation">.</span>Consumer<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上是 Context 的使用步骤，更多用法请参考官网。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Flutter】问题记录</title>
      <link href="/2019/08/01/flutter-wen-ti-ji-lu/"/>
      <url>/2019/08/01/flutter-wen-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="gradle-问题"><a href="#gradle-问题" class="headerlink" title="gradle 问题"></a>gradle 问题</h2><h3 id="Exception-in-thread-“main”-java-lang-NullPointerException（window7系统）"><a href="#Exception-in-thread-“main”-java-lang-NullPointerException（window7系统）" class="headerlink" title="Exception in thread “main” java.lang.NullPointerException（window7系统）"></a>Exception in thread “main” java.lang.NullPointerException（window7系统）</h3><blockquote><p>参考：<a href="https://www.jianshu.com/p/c966e58dfb79" target="_blank" rel="noopener">简书-flutter运行报错exited abnormally</a></p></blockquote><p>在 AndroidStudio（3.4.2） 中创建 Flutter 项目后立即运行，报了如下异常：</p><pre><code>Finished with error: ProcessException: Process &quot;C:\_code\flutter\flutter_app\flutter_app\android\gradlew.bat&quot; exited abnormally:Exception in thread &quot;main&quot; java.lang.NullPointerException    at org.gradle.wrapper.BootstrapMainStarter.findLauncherJar(BootstrapMainStarter.java:34)    at org.gradle.wrapper.BootstrapMainStarter.start(BootstrapMainStarter.java:25)    at org.gradle.wrapper.WrapperExecutor.execute(WrapperExecutor.java:129)    at org.gradle.wrapper.GradleWrapperMain.main(GradleWrapperMain.java:61)  Command: C:\_code\flutter\flutter_app\flutter_app\android\gradlew.bat -vFinished with error: ProcessException: Process &quot;C:\_code\flutter\flutter_app\flutter_app\android\gradlew.bat&quot; exited abnormally:Exception in thread &quot;main&quot; java.lang.NullPointerException    at org.gradle.wrapper.BootstrapMainStarter.findLauncherJar(BootstrapMainStarter.java:34)    at org.gradle.wrapper.BootstrapMainStarter.start(BootstrapMainStarter.java:25)    at org.gradle.wrapper.WrapperExecutor.execute(WrapperExecutor.java:129)    at org.gradle.wrapper.GradleWrapperMain.main(GradleWrapperMain.java:61)  Command: C:\_code\flutter\flutter_app\flutter_app\android\gradlew.bat -v</code></pre><p>打开“android/gradle/wrapper/gradle-wrapper.properties”文件，将 gradle 的版本改为本地的最新版本，如下：</p><pre><code>distributionUrl=https\://services.gradle.org/distributions/gradle-5.1.1-all.zip</code></pre><p>重新 Run ‘main.dart’，便正常了。尽管原来的“4.10.2-all”版本在本地也是有的。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SSH协议通过路由器远程访问家里的电脑</title>
      <link href="/2019/07/26/shi-yong-ssh-xie-yi-tong-guo-lu-you-qi-yuan-cheng-fang-wen-jia-li-de-dian-nao/"/>
      <url>/2019/07/26/shi-yong-ssh-xie-yi-tong-guo-lu-you-qi-yuan-cheng-fang-wen-jia-li-de-dian-nao/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1315901717&auto=1&height=66"></iframe><h2 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h2><p>需要掌握命令行终端的使用和常用的 Shell 命令。</p><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p>之前在 Vultr 搭建了 VPN，搭建过程是通过 SSH 远程连接实现的。受此启发，便想着能不能在自己的电脑上搭建 SSH 服务，通过 SSH 连接家里电脑的终端，以执行命令或传输文件。</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="在路由器上配置端口映射"><a href="#在路由器上配置端口映射" class="headerlink" title="在路由器上配置端口映射"></a>在路由器上配置端口映射</h3><ol><li><p>在浏览器地址栏中输入 “192.168.1.1” 并打开，进入路由器设置页面</p></li><li><p>百度搜索“ip”查看你的外网 IP （一般位于百度搜索的第一个结果），并查看路由器设置中的 IP 和百度搜索的 IP 是否一致，一致则说明该路由器分配到的是外网 IP。假设我的是“222.222.22.2”。</p></li><li><p>查看路由器给自己电脑分配的内网 IP，我的主机名是“wxm-PC”，内网 IP 是“192.168.1.5”，如图：</p><p><img src="https://ae01.alicdn.com/kf/H48fbb7963a8848a5939d488a093854cev.png" alt></p></li><li><p>进入“静态分配客户端配置”项，给电脑设置固定的内网 IP：</p><p><img src="https://ae01.alicdn.com/kf/Hfc878cdfdfa6474f8675534fadf3c392h.png" alt></p></li><li><p>进入“虚拟主机配置”项，设置端口映射，即将外网端口”8222“映射到 SSH 的端口”22“。外网端口自己定义，一般要设大一些，避免冲突，这里我设置为”8222“。</p><p><img src="https://ae01.alicdn.com/kf/Hc2351dc45c7b4bd389d46452c333ef3de.png" alt></p></li></ol><h3 id="搭建-SSH-服务器"><a href="#搭建-SSH-服务器" class="headerlink" title="搭建 SSH 服务器"></a>搭建 SSH 服务器</h3><p>window7 系统没有自带 SSH 服务器软件，需要下载一款。这里用的是 freeSSH。</p><ol><li><p>下载 <a href="http://www.freesshd.com/?ctt=download" target="_blank" rel="noopener">freeSSHd.exe</a>，安装过程中会为 SSH 服务器生成密钥，以及为 freeSSHD 添加系统服务，需要点击确认。</p></li><li><p>下载 <a href="http://www.freesshd.com/?ctt=download" target="_blank" rel="noopener">freeUserImport.exe</a> 软件，点击运行，导入登录用户。</p></li><li><p>设置 SSH 参数。”Listen address“设置为内网 IP，使用默认的”0.0.0.0“也行。”Port“为默认的22，”Command shell“默认为 cmd ，这里我设置成了 git-bash（后面要“–login -i”参数）。</p><p><img src="https://ae01.alicdn.com/kf/Haee0ce72e6194acc9c06e0f1c3b33105u.png" alt></p></li><li><p>添加用户信息。“Authorization”设置为“Public key(SSH only)”，即用密钥登录，相比用密码登录的安全系数要高。“User can use” 这里，“Shell”指可以执行终端的命令，“SFTP”指可以通过命令传输文件。</p><p><img src="https://ae01.alicdn.com/kf/H5426dcf9f7e04f68b82c7de692c6d920n.png" alt></p></li><li><p>启动服务。打开“Server status”标签，如果是下图的状态，则点击“SSH server is not running”下方的“Click here to start it”来启动服务。</p><p><img src="https://ae01.alicdn.com/kf/Hc36ee729366a479b98d5f5560c32d19f3.png" alt></p></li><li><p>如果启动服务报错：generic error for access violation，表明服务被占用，需要关闭服务：按快捷键“Ctrl+Alt+Delete”启动任务管理器，点击服务进入服务设置页面，找到“freeSSHService”，关闭服务，再重复步骤 5，直到出现“SSH server is running”状态。</p><p><img src="https://ae01.alicdn.com/kf/H6c9fd1833cdb4ff7a1b54f4641637348o.png" alt></p><p><img src="https://ae01.alicdn.com/kf/H2e103b4317f14209b698973b49e3593ex.png" alt></p><p><img src="https://ae01.alicdn.com/kf/H862988ab3e2049a8a3a41a7eebf39976C.png" alt></p></li></ol><h3 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h3><p>家里启动了 SSH 服务的是“被访问”的电脑，我们要在“访问”的电脑上生成密钥，通过以下命令生成：</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa</code></pre><p>执行完之后会在用户目录下的“.ssh”目录中生成密钥和公钥文件，假设是 id_rsa 和 id_rsa.pub 文件。在“.ssh”目录中的 config 文件（没有则创建）添加如下配置（以Mac系统为例）：</p><pre><code>Host wxm # 主机名User wxm # 用户名HostName 222.222.22.2 # 外网 IPPort 8222 # 外网端口IdentityFile ~/.ssh/id_rsa # 私钥路径</code></pre><p>将公钥文件（id_rsa.pub）复制到被访问的电脑的 freeSSH 软件安装目录下，并重命名为之前在”Users“配置中添加的用户名，这里是”wxm“（连后缀一起改）。</p><h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><p>打开访问的电脑终端，执行以下命令建立 SSH 连接：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> wxm</code></pre><p>”wxm“指的是在”.ssh/config“文件中配置的”Host“的值。</p><p>退出连接则在终端中输入<code>exit</code> 命令。</p><p>在进行 SSH 连接之前要确保”被访问“的电脑中的 SSH 服务已经开启。</p><h3 id="使用-sftp-服务上传下载文件"><a href="#使用-sftp-服务上传下载文件" class="headerlink" title="使用 sftp 服务上传下载文件"></a>使用 sftp 服务上传下载文件</h3><p>前提是在 freeSSH 的”User can use“选项中勾选了”SFTP“。</p><ol><li>上传：<code>put /path/filename(本地主机) /path/filename(远端主机)</code></li><li>下载：<code>get /path/filename(远端主机) /path/filename([本地主机](https://baike.baidu.com/item/本地主机))</code></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.cnblogs.com/chenmingjun/p/8535067.html" target="_blank" rel="noopener">Windows 系统中安装 SSH 服务</a></li><li><a href="https://blog.csdn.net/lsfreeing/article/details/82424115" target="_blank" rel="noopener">windows freeSSHd搭建SFtp服务器</a></li><li><a href="https://baike.baidu.com/item/sftp" target="_blank" rel="noopener">百度百科</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
            <tag> freeSSH </tag>
            
            <tag> window系统 </tag>
            
            <tag> 远程访问 </tag>
            
            <tag> 路由器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Hexo博客</title>
      <link href="/2019/07/21/da-jian-hexo-bo-ke/"/>
      <url>/2019/07/21/da-jian-hexo-bo-ke/</url>
      
        <content type="html"><![CDATA[<blockquote><p>搭建 Hexo 博客需要一定的前端基础。技术栈涉及 Node.js、css、yaml 等。</p></blockquote><h2 id="工具与文档"><a href="#工具与文档" class="headerlink" title="工具与文档"></a>工具与文档</h2><h3 id="基础工具"><a href="#基础工具" class="headerlink" title="基础工具"></a>基础工具</h3><ul><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo 博客框架：Hexo 官方文档</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">Hexo 主题：hexo-theme-matery 的 github 仓库地址</a></li><li><a href="https://github.com/" target="_blank" rel="noopener">代码托管及部署：github</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">配置文件语言：YAML 语言教程</a></li></ul><h3 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h3><ul><li><a href="https://music.liuzhijin.cn/" target="_blank" rel="noopener">音乐素材：刘志进实验室-音乐直链搜索</a></li><li><a href="http://www.ytmp3.cn/" target="_blank" rel="noopener">音乐素材：扬天音乐</a></li><li><a href="https://music.163.com/" target="_blank" rel="noopener">音乐素材：网易云音乐（可以生成外链播放器）</a></li><li><a href="http://zhongguose.com/" target="_blank" rel="noopener">色彩素材：中国色</a></li><li><a href="http://app.inker.co/" target="_blank" rel="noopener">图标制作：inker 矢量图在线制作（没用上）</a></li><li><a href="http://desk.zol.com.cn/" target="_blank" rel="noopener">图片素材：ZOL桌面壁纸</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
